DHBarButtonItem is a UIBarButtonItem subclass that lets you create bar-button-items by specifying arrays containing images, text, and spacing.

v1.1: 
 * masked images were not properly flipped - fixed
 * more example code added to this README

You create this item using the class factory method:

  + (DHBarButtonItem *)itemWithImageItems:(NSArray *)itemsArray options:(NSDictionary *)optDict;

The "itemsArray" parameter contains instructions on how to build the first displayed image. The optDict parameter lets you set some initial conditions such as left and right side padding, and should contain arrays detailing all potential images or text which may appear in any given column (for the purpose of insuring sufficient spaces exists in that column). The returned object has the initial image set. The width of this and all future images is fixed and will not change.

UIToolbars auto-mask images, rendering them in white. UINavigationBars show the actual image - thus DHBarButtonItem provides options to auto-mask images for you, and optionally lets you set the item color.

When you specify an item, you can horizontally align it left, center, or right, and you can increase or decrease its vertical position relative to other items.

Retina displays receive proper treatment (finely rendered text, double sized images).

To change the displayed item, you message the object with: 

  - (void)imageFromItems:(NSArray *)items;

Look at the demo code in ViewController.m, or here is an example of getting white icons in a navigation bar, and toggling the second image on every tap:

	UIImage *gift	= [UIImage imageNamed:@"24-gift.png"];
	UIImage *box	= [UIImage imageNamed:@"58-box.png"];
	UIImage *check	= [UIImage imageNamed:@"58-todo.png"];
	
	NSDictionary *giftDict	= [NSDictionary dictionaryWithObjectsAndKeys:gift, kBBITTimage, [NSNumber numberWithBool:YES], kBBITTmask, nil];
	NSDictionary *boxDict	= [NSDictionary dictionaryWithObjectsAndKeys:box, kBBITTimage, [NSNumber numberWithBool:YES], kBBITTmask, nil];
	NSDictionary *checkDict	= [NSDictionary dictionaryWithObjectsAndKeys:check, kBBITTimage, [NSNumber numberWithBool:YES], kBBITTmask, nil];
	
	noGiftArray	= [NSArray arrayWithObjects:
					giftDict,
					boxDict,
					nil];
	giftArray	= [NSArray arrayWithObjects:
					giftDict,
					checkDict,
					nil];

	DHBarButtonItem *item = [DHBarButtonItem itemWithImageItems:noGiftArray options:[NSDictionary dictionaryWithObjectsAndKeys:
								[NSNumber numberWithInteger:UIBarButtonItemStylePlain], kBBITToptStyle,
								[NSNumber numberWithInteger:8], kBBITToptPadding,
								[NSArray arrayWithObjects:
									[NSArray arrayWithObject:giftDict],
									[NSArray arrayWithObjects:boxDict, checkDict, nil],
									nil], kBBITToptionsArray,
								nil]
							];
	item.target = self;
	item.action = @selector(giftAction:);
	self.navigationItem.rightBarButtonItem = item;
}

- (IBAction)giftAction:(id)sender
{
	giftOn = !giftOn;
	[((DHBarButtonItem *)sender) imageFromItems:giftOn ? giftArray : noGiftArray];
}


Note 1: This code utilizes "ARC" - if you are not using it you will almost certainly need to fork this code and add the appropriate retain and releases.

Note 2: The icons used in the demo are from the free set of icons provided by Glyphish:  http://glyphish.com/

Copyright (c) 2011 David Hoerl, all rights reserved.